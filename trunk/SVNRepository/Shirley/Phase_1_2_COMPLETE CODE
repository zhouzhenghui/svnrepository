###---PHASE 1---###
setwd("//erevno/Courses/Agamas/Shirley/SVNRepository/Code/Development/initial_analysis_r_code")
setwd("C:/Users/Shirley Lu/Shirley/MEng/Project/SVNRepository/SVNRepository/Code/Development/initial_analysis_r_code")

library(leaps)

#source initial files
source("../source_functions/get.all.data.R")
source("../source_functions/get.sd.data.R")
source("../source_functions/get.sreturn.R")
source("../source_functions/multi.adf.test.R")
source("../source_functions/multi.adf.test.lags.R")
source("../source_functions/format.dates.R")
source("../source_functions/chop.R")
source("../source_functions/shift.R")
source("../source_functions/get.lagvectors.R")
source("../source_functions/dataframe.eda.R")
source("../source_functions/dategen.R")
source("../source_functions/get.res.formula.R")
source("../source_functions/shift.df.R")
source("../source_functions/shift.df.multi.R")
source("../source_functions/smoother.R")

begin_month=1
begin_year=1998
state = "KS" #our dependent variable 
end_month = 6
end_year = 2008

supply_demand_data_code_vector=c(
"median_income",
#"thirty_year_current_coupon",
"ty_cr",
"mort_orig",
"unemp_rate",
#"primary_interest_rate",
"pop_size",
#"population_growth",
#"median_house_median_income",
#"delta_from_median_house_median_income"
"foreclosures",
#"housing_stock",
#"inventory_turnover",
"building_permits"
)


#basic tests
test.data.frame = get.all.data(supply_demand_data_code_vector,state,begin_month,begin_year,end_month,end_year,smooth=TRUE)
## To get original plots:
test.data.vector = test.data.frame$combined # this has the mean-centered rates (non-simple return), and simple returns
## To get simple return plots:
test.data.vector = test.data.frame$combined_spec # this has the mean-centered rates (non-simple return), and simple returns

dates = dategen(begin_month+1,begin_year, end_month, end_year)  #begin month + 1 because we had to chop off the first month
test.and.plot = dataframe.eda(test.data.vector, state, dates, basicTS = F, comparisonTS = T, allTS = F, CCF = F, scatter = F, ACF = F, PACF = F)
test.and.plot$adf.test


#get shifted independent variables
independent.variables = supply_demand_data_code_vector
#do the time shiftin here, lags depend on ranges entered in lagranges.csv
shifted.multivar.test.data.vector = shift.df.multi(test.data.vector,state,independent.variables)
dataframe.eda(shifted.multivar.test.data.vector,state,dates) #X out for a cheap time shifting animation, just do it you'll see

#try a stepwise regression on 1 variable to determine the most significant lag
form = as.formula(paste(state," ~ .",sep=""))
bs.reg = regsubsets(x= form, nbest=1, data = shifted.multivar.test.data.vector, nvmax=30,intercept=FALSE, method=c("backward"), really.big=FALSE)
summary(bs.reg)
names(bs.reg)
plot(x=bs.reg, labels=bs.reg$xnames, scale=c("bic"), col="blue", main = paste("Stepwise BIC Regression of",state))
dev.new()
plot(x=bs.reg, labels=bs.reg$xnames, scale=c("adjr2"), col="blue", main = paste("Stepwise R^2 Regression of",state))

## Fit rlm to lagged variables
n = ncol(shifted.multivar.test.data.vector)
y = rlm(shifted.multivar.test.data.vector[,1:(n-1)],shifted.multivar.test.data.vector[,n])
summary(y)

## Fit rlm to unlagged variables
a = rlm(test.data.vector[,1:(length(test.data.vector)-1)],test.data.vector[,length(test.data.vector)])
summary(a)

## Plot unlagged, lagged regression models + original HPI
##- CHANGE STATE NAME IN TITLE
plot(a$fitted.values,type="l",main="Model vs. Fitted FL",col="red",ylim=c(-0.002,0.023))
lines(test.data.vector[,length(test.data.vector)])
lines(y$fitted.values,type="l",col="blue")
legend("topleft",c("unlagged","lagged","actual"),col=c("red","blue","black"),lty=c(1,1,1))

## Lagged regression residuals plots
par(mfrow=c(1,3))
plot(y$residuals,main="Lagged regression residuals")
acf(y$residuals, lag=40,main="ACF")
pacf(y$residuals, main="PACF")

## Unlagged regression residuals plots
par(mfrow=c(1,3))
plot(a$residuals,main="Unlagged regression residuals")
acf(a$residuals, lag=40,main="ACF")
pacf(a$residuals, main="PACF")

## Stationarity tests for lagged regression residuals
pacf(diff(y$residuals))   # get lag from this + 1
k = 3
adf.test(y$residuals, k=k)
library(urca)
ur.df(y$residuals, type="none", lags=k)@teststat
ur.df(y$residuals, type="none", lags=k)@cval


###---PHASE 2---###

## Ljung-Box test to check for autocorrelation
Box.test(y$residuals, lag = 12, type = c("Ljung-Box"))

## If Ljung-Box fails, fit ARMA
# Fit ARMA manually
source("../source_functions/ATS_2008.R")
eacf(y$residuals)
# Fit ARMA using auto.arima
library(forecast)
auto.arima(y$residuals,stationary=T)
arima.fit = arima(y$residuals,order = c(1,0,0))
arima.fit
names(arima.fit)
params = 1
Box.Ljung.test(arima.fit$residuals,lag = 12, adj.DF = 12-params)
Box.Ljung.test(arima.fit$residuals^2,lag = 12, adj.DF = 12)

arima.fit = arma(y$residuals,order = c(2,0,0))
arima.fit$fitted.values

## PLOTTING ARMA RESIDUALS
plot(arima.fit$residuals, type="p")
loess(arima.fit$residuals)
abline(h=0)
?loess


#### REORGANIZE THIS PART ########
resid.data = y$residuals
plot(y$fitted.values + resid.data - arima.fit$residuals, type="l", ylim=c(-0.020,0.035), ylab="Simple Return", xlab="Time", main="Plot of Fitted vs. Actual HPI")
lines(shifted.multivar.test.data.vector[,n],col="blue")
lines(y$fitted.values,col="red")
lines(resid.data - arima.fit$residuals, col="green")
lines(arima.fit$fitted.values, col="yellow")
legend("topright",c("Fitted HPI", "Actual HPI"), col=c("black","blue"), lty=c(1,1))

test.data.vector = test.data.frame$combined
initial = test.data.vector[,ncol(test.data.vector)][1]
plot(get.orig.data(initial,y$fitted.values + resid.data - arima.fit$residuals),type="l")
lines(test.data.vector[,ncol(test.data.vector)], col="blue")
##############################


## Fit GARCH if residual^2 fails
library(fGarch)
garch.fit = garchFit(formula = ~arma(1,0)+garch(1,2), data=arima.fit$residuals,cond.dist = c("QMLE"), include.mean=TRUE)

## Checking adequacy of GARCH model
meanParams = 1
volParams = 3
sresi=garch.fit@residuals/garch.fit@sigma.t
Box.Ljung.test(sresi, lag = 12, adj.DF =  12-meanParams)  
Box.Ljung.test(sresi^2, lag = 12, adj.DF = 12-volParams) 
